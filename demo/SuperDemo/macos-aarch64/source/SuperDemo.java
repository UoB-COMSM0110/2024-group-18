/* autogenerated by Processing revision 1293 on 2024-01-31 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class SuperDemo extends PApplet {

Player player;
Shadow shadow;
Laser laser[]=new Laser[5];
float playTime=0;
Platform platform1;

public void setup(){
  /* size commented out by preprocessor */;
  player=new Player();
  shadow=new Shadow();
  platform1=new Platform();

  for(int i=0;i<laser.length;i++){
    laser[i]=new Laser();
  }
}

public void draw(){
  background(255);
  fill(205,133,63);
  rect(0,height/2+14,1000,100);
  
  PFont font=createFont("./assets/PressStart2P-Regular.ttf",20);
  textFont(font);
  text("Pixel Adventure",10,30);
  text("HP:"+(int)player.hpPoint,10,460);
  text(playTime+"ms",360,460);
  if(player.skillCooldown>0){
    text("Skill Cooldown:"+player.skillCooldown,10,480);
  }else{
    text("Skill Ready",10,480);
  }
  
  rect(platform1.location.x,platform1.location.y,platform1.platformWidth,platform1.platformHeight);
  
  imageMode(CENTER);
  shadow.updateLocation(player.location);
  image(shadow.image,shadow.location.x,shadow.location.y);
  player.updateAnimation();
  if(player.hpProtect){
    fill(166,205,231);
    stroke(166,205,231);
    ellipse(player.location.x,player.location.y,30,35);
  }
  image(player.image,player.location.x,player.location.y);

  
  
  
  player.velocity.add(player.accelarate);
  player.location.add(player.velocity);
  
  if(player.location.y>height/2){
    player.location.set(player.location.x,height/2);
    player.canJump=true;
  }
  
  if(player.castFlag){
    player.velocity.set(0,0);
    player.location.set(shadow.location.x,shadow.location.y);
    player.skillCooldown+=20; 
    player.castFlag=false;
  }
  
  fill(255,0,0);
  noStroke();
  for(int i=0;i<laser.length;i++){
    rect(laser[i].location.x,laser[i].location.y,laser[i].laserLength,laser[i].laserHeight);
    laser[i].location.add(laser[i].velocity.x,laser[i].velocity.y);
    player.checkLaserCollision(laser[i]);
    laser[i].checkOutOfBorder();
    if(laser[i].ifOut){
      laser[i]=new Laser();
      laser[i].ifOut=false;
    }
  }
  fill(0);
  if(player.hpPoint<=0){
    text("Game Over",width/2-90,height/2);
    text("Click mouse to restart",width/2-220,height/2+40);
  }
  if(player.hpPoint>0){
    playTime+=1;
  }
  
  checkPlatformCollision(player,platform1);
  if(player.location.y-player.playerHeight/2>platform1.location.y+platform1.platformHeight&&player.platformTouched){
      player.platformTouched=false;
    }
  // end of draw()
}

public void checkPlatformCollision(Player player,Platform platform){
  
  if(player.location.x-player.playerWidth/2<platform.location.x+platform.platformWidth&&
  player.location.x+player.playerWidth/2>platform.location.x&&
  player.location.y-player.playerHeight/2<platform.location.y+platform.platformHeight&&
  player.location.y+player.playerHeight/2>platform.location.y){
    // colliding
    text("collision test",100,100);
    if(player.location.y+player.playerHeight/2>platform.location.y&&player.velocity.y>=0){
      player.location.set(player.location.x,platform.location.y-player.playerHeight/2);
      player.velocity.set(player.velocity.x,0);
      player.canJump=true;
    }
    if(player.location.y-player.playerHeight/2<platform.location.y+platform.platformHeight&&!player.platformTouched&&
    player.velocity.y<0){
      player.location.set(player.location.x,platform.location.y+platform.platformHeight+player.playerHeight/2);
      player.velocity.set(player.velocity.x,0);
      player.platformTouched=true;
    } 
    
  }
}

public void keyPressed(){
  boolean right=keyCode==RIGHT;
  boolean left=keyCode==LEFT;
  boolean up=keyCode==UP;
  boolean skill=key==' ';
  if(up&&right&&player.canJump){
    player.velocity.add(player.speed,-player.strength);
    player.canJump=false;
  }else if(up&&left&&player.canJump){
    player.velocity.add(-player.speed,-player.strength);
    player.canJump=false;
  }else if(skill){
    if(player.skillCooldown<=0){
      player.skillFlag=true; 
    }
  }else{
    if(up&&player.canJump){
      player.velocity.set(player.velocity.x,-player.strength);
      player.canJump=false;
    }
    if(right){
      player.velocity.set(player.speed,0);
    }
    if(left){
      player.velocity.set(-player.speed,0);
    }
  }
}

public void keyReleased(){
  player.velocity.set(0,player.velocity.y);
  
}

public void mouseClicked(){
  if(player.hpPoint<=0){
    player.hpPoint=3;
    playTime=0;
  }
}
class Laser{
  PVector location;
  PVector velocity;
  float laserLength=100;
  float laserHeight=5;
  boolean ifOut;
  float randomX;
  
  public Laser(){
    ifOut=false;
    randomX=random(0,1);
    if(randomX>0.5f){
      location=new PVector(0,random(0,height/2));
      velocity=new PVector(random(1,3),0);
    }else{
      location=new PVector(width,random(0,height/2));
      velocity=new PVector(random(-3,-1),0);
    }
  }
  public void checkOutOfBorder(){
     if(randomX>0.5f){
       if(location.x>=width+150){
         ifOut=true;
       }
     }else{
       if(location.x<-150){
         ifOut=true;
       }
     }
  }

}
class Platform{
  PVector location;
  float platformWidth;
  float platformHeight;
  
  public Platform(){
    float x=random(100,  400);
    float y=random(150,height/2-50);
    location=new PVector(x,y);
    platformWidth=random(100,200);
    platformHeight=20;
  }
  
  

}
class Player{
  PVector location;
  PVector velocity;
  PVector accelarate;
  
  float speed;
  float strength;
  float hpPoint; 
  float skillCooldown;
  
  PImage idle[];
  PImage idleLeft[];
  PImage leftRun[];
  PImage rightRun[];
  PImage chronoJump[];
  PImage currentAnimation[];
  PImage image;
  
  int index;
  int skillIndex;
  boolean canJump;
  float friction;
  int frame;
  boolean faceRight;
  boolean skillFlag;
  boolean castFlag;
  
  float collisonTop;
  boolean hpProtect;
  float protectSecond;
  
  float playerWidth=22;
  float playerHeight=26;
  
  boolean platformTouched;

  
  public Player(){
    location=new PVector(width/2,height/2-100); // born in the middle air of screen
    velocity=new PVector(0,0);
    accelarate=new PVector(0,.32f);
    
    speed=2;
    strength=10;
    hpPoint=3;
    index=0;
    skillIndex=0;
    friction=0.3f;
    frame=0;
    faceRight=true;
    skillCooldown=10;
    skillFlag=false;
    castFlag=false;
    hpProtect=false;
    protectSecond=20;
    platformTouched=false;


    
    idle=new PImage[1];
    idle[0]=loadImage("./assets/run/Run_0.gif");
    idleLeft=new PImage[1];
    idleLeft[0]=loadImage("./assets/run/RunToLeft_11.gif");
    
    leftRun=new PImage[12];
    leftRun[0]=loadImage("./assets/run/RunToLeft_11.gif");
    leftRun[1]=loadImage("./assets/run/RunToLeft_10.gif");
    leftRun[2]=loadImage("./assets/run/RunToLeft_9.gif");
    leftRun[3]=loadImage("./assets/run/RunToLeft_8.gif");
    leftRun[4]=loadImage("./assets/run/RunToLeft_7.gif");
    leftRun[5]=loadImage("./assets/run/RunToLeft_6.gif");
    leftRun[6]=loadImage("./assets/run/RunToLeft_5.gif");
    leftRun[7]=loadImage("./assets/run/RunToLeft_4.gif");
    leftRun[8]=loadImage("./assets/run/RunToLeft_3.gif");
    leftRun[9]=loadImage("./assets/run/RunToLeft_2.gif");
    leftRun[10]=loadImage("./assets/run/RunToLeft_1.gif");
    leftRun[11]=loadImage("./assets/run/RunToLeft_0.gif");
    
    rightRun=new PImage[12];
    rightRun[0]=loadImage("./assets/run/Run_0.gif");
    rightRun[1]=loadImage("./assets/run/Run_1.gif");
    rightRun[2]=loadImage("./assets/run/Run_2.gif");
    rightRun[3]=loadImage("./assets/run/Run_3.gif");
    rightRun[4]=loadImage("./assets/run/Run_4.gif");
    rightRun[5]=loadImage("./assets/run/Run_5.gif");
    rightRun[6]=loadImage("./assets/run/Run_6.gif");
    rightRun[7]=loadImage("./assets/run/Run_7.gif");
    rightRun[8]=loadImage("./assets/run/Run_8.gif");
    rightRun[9]=loadImage("./assets/run/Run_9.gif");
    rightRun[10]=loadImage("./assets/run/Run_10.gif");
    rightRun[11]=loadImage("./assets/run/Run_11.gif");
    
    chronoJump=new PImage[7];
    chronoJump[0]=loadImage("./assets/chronoJump/Desappearing-(96x96)_01.gif");
    chronoJump[1]=loadImage("./assets/chronoJump/Desappearing-(96x96)_02.gif");
    chronoJump[2]=loadImage("./assets/chronoJump/Desappearing-(96x96)_03.gif");
    chronoJump[3]=loadImage("./assets/chronoJump/Desappearing-(96x96)_04.gif");
    chronoJump[4]=loadImage("./assets/chronoJump/Desappearing-(96x96)_05.gif");
    chronoJump[5]=loadImage("./assets/chronoJump/Desappearing-(96x96)_06.gif");
    chronoJump[6]=loadImage("./assets/chronoJump/Desappearing-(96x96)_07.gif");
    
    currentAnimation=idle;
  }
  
  public void updateAnimation(){
    if(skillFlag){
      castSkill();
    }else{
      selectFacing();
    }
    displayImage();
  }
  
  public void selectFacing(){
    if(velocity.x>0){
      faceRight=true;
      currentAnimation=rightRun;
    }else if(velocity.x<0){
      faceRight=false;
      currentAnimation=leftRun;
    }else{
      index=0;
      if(faceRight){
        currentAnimation=idle;
      }else{
        currentAnimation=idleLeft;
      }
      
    }
  }
  
  public void displayImage(){
    if(frame%6==0){
      image=currentAnimation[index];
      if(skillFlag&&index>=currentAnimation.length-1){
        skillFlag=false;
        castFlag=true;
      }
      index=(index+1)%currentAnimation.length;
      skillCooldown-=1;
      if(skillCooldown<0){
        skillCooldown=0;
      }
    }
    frame++; 
  }
  
  public void castSkill(){
      currentAnimation=chronoJump;
  }
  
  public void checkLaserCollision(Laser laser){
     if(location.x-16<laser.location.x+laser.laserLength&&
     location.x+16>laser.location.x&&
     location.y-16<laser.location.y+laser.laserHeight&&
     location.y+16>laser.location.y&&hpProtect==false){
       hpPoint--;
       hpProtect=true;
     }
     if(hpProtect){
       protectSecond--;
     }
     if(protectSecond==0){
       hpProtect=false;
       protectSecond=100;
     }
  }
  
  
  
  
  
  
  
  
}
class Shadow{
  PVector location;
  PVector locationRecord[];
  int index;
  int frame;
  PImage image;
  
  public Shadow(){
    location=new PVector(width/2,height/2-100);
    locationRecord=new PVector[5];
    
    index=0;
    
    image=loadImage("./assets/chronoJump/Desappearing-(96x96)_01.gif");
  }
  public void updateLocation(PVector data){
    if(frame%30==0){
      locationRecord[index]=new PVector(data.x,data.y);
      if(index==locationRecord.length-1){
        location.set(data.x,data.y);
      }
      index=(index+1)%locationRecord.length;
    }
    frame++;
  }
  
  
}


  public void settings() { size(500, 500); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "SuperDemo" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
